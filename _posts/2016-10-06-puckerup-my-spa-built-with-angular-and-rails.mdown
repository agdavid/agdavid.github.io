---
layout: post
title:  PuckerUp - My SPA Built With AngularJS and a Rails API
date:   2016-10-06 13:58:33 -0400
---

<p>
  <span style="text-align:center; display: block;">
    <iframe type="text/html" width="682" height="414" src="https://www.youtube.com/embed/9N_rNwhFwl0?version=1&amp;rel=1&amp;fs=1&amp;autohide=2&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;wmode=transparent" allowfullscreen="true" style="border:0;">
    </iframe>
  </span>
</p>

Learning AngularJS was amazing, plain and simple.  It was incredible to finally see how you could plan out and engineer a single-page application(SPA) with a dynamic AngularJS frontend that communicates with a Rails API backend.  I understood how you could split up architecting between frontend and backend teams.

But let's get into the project.


## The Idea
PuckerUp is my latest application and it's a SPA! It brings together my excitement for AngularJS, Rails and sour beers.  The goal of PuckerUp is to provide users with the ultimate, crowd-sourced list of sour beer breweries across the USA.  Everywhere you go, PuckerUp will help you locate your next sour brew.

For the quick overview, please enjoy my video walkthrough above.  More detailed discussion of architecting the application is below.  Enjoy!

## The Design
In terms of design, PuckerUp is the marriage between two standalone components: (1) the Rails API backend; and (2) the AngularJS frontend.

The Rails API is a lean and mean database that provides JSON when needed.  The ORM includes the following key relationships:

```
class Brewery < ApplicationRecord
    belongs_to :state, optional: true
end

class State < ApplicationRecord
    has_many :breweries, dependent: :destroy
end
```
*Why the 'optional: true' for a Brewery?*  Rails 5 made the 'belongs_to' association required by default. You can find this in the initializer:

```
#config/initializers/active_record_belongs_to_required_by_default.rb
Rails.application.config.active_record.belongs_to_required_by_default = true
```

This means that if the associated record has not been instantiated prior to instantiating the primary record, Rails will not persist the primary record to the database.  In my scenario, since a Brewery belongs_to a State, the State had to exist before instantiating the Brewery, otherwise ActiveRecord would rollback the database insertion.

You can make this relationship optional.  I chose to do that by adding 'optional: true'.





